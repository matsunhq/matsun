swagger: "2.0"
info:
  description: "It's a application like Instagram that show pictures or movie you took."
  version: "1.0.0"
  title: "Matsustagram"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Nginx 1.17.3"
    url: "https://github.com/nginxinc/docker-nginx/blob/0ad6faa0790f423fb239f2b8800dc339d763869a/mainline/alpine/Dockerfile"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "articles"
  description: "投稿記事"
- name: "users"
  description: "ユーザー"
- name: "like"
  description: "いいね"
- name: "follow"
  description: "フォロー"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /articles: 
    get:
      tags:
      - "articles"
      summary: "投稿記事一覧取得"
      description: "投稿記事一覧取得"
      responses:
        200:
          description: OK
        400:
          description: ""
    post:
      tags:
      - "articles"
      summary: "投稿記事保存"
      description: "投稿記事保存"
      responses:
        200:
          description: OK
        400:
          description: "Fail to save a article"
  /articles/{article_id}:
    get:
      tags: 
      - 'articles'
      summary: 'ユーザーIDのユーザー情報を取得'
      description: '指定されたユーザーIDのユーザー情報を取得する'
      parameters:
      - name: 'article_id'
        in: 'path'
        required: true
        type: integer
      responses:
        200:
          description: OK
        400:
          description: 'Fail to get a article'
    put:
      tags: 
        - 'articles'
      summary: '投稿記事の編集'
      description: '投稿記事の編集'
      parameters:
      - name: 'article_id'
        in: 'path'
        required: true
        type: integer
      responses:
        200:
          description: OK
        400:
          description: 'Fail to update a article'
    delete:
      tags: 
      - 'articles'
      summary: '指定のユーザーIDのユーザー情報を削除'
      description: '指定のユーザーIDのユーザー情報を削除'
      parameters:
      - name: 'article_id'
        in: 'path'
        required: true
        type: integer
      responses:
        200:
          description: OK
        400:
          description: 'Fail to delete a article'
  /users:
    get:
      tags:
        - "users"
      summary: "ユーザー一覧情報取得"
      description: "ユーザー情報を取得する関数"
      responses:
        200:
          description: OK
        400:
          description: "Invalid ID supplied"
    post:
      tags:
      - "users"
      summary: "ユーザー情報を登録する関数"
      description: "ユーザー情報を登録する関数"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/login:
    get:
      tags:
      - "users"
      summary: "ユーザーログイン機能"
      description: "ユーザーログイン機能"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /users/logout:
    get:
      tags:
      - "users"
      summary: "ユーザーログアウト処理"
      description: "ユーザーログアウト処理"
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/{user_id}:
    get:
      tags:
      - "users"
      summary: "指定のユーザーIDを取得する関数"
      description: "指定のユーザーIDを取得する関数"
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ユーザー表示名"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "ユーザー情報の更新"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "ユーザー削除"
      description: "ユーザー情報を削除する関数."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Article:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int"
      title:
        type: "string"
      user_id:
        type: "integer"
    xml:
      name: "Article"
  Image:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int'
      name:
        type: 'string'
        description: '画像ファイル名'
      created_at:
        format: 'time_stamp'
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"