swagger: "2.0"
info:
  description: "It's a application like Instagram that show pictures or movie you took."
  version: "1.0.0"
  title: "Matsustagram"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
tags:
- name: "posts"
  description: "投稿記事"
- name: "users"
  description: "ユーザー"
schemes:
- 'https'
- 'http'
paths:
  /posts: 
    get:
      tags:
      - 'posts'
      summary: '投稿記事一覧取得'
      description: '投稿記事一覧取得'
      operationId: 'getPosts'
      responses:
        200:
          description: OK
          schema:
            type: "array"
            description: "この配列内に、POSTオブジェクトの集合が入っている"
            items:
              type: "object"
              description: "このオブジェクト1つが`post`のオブジェクト"
              properties:
                id: 
                  type: "integer"
                  format: "int64"
                images:
                  type: "array"
                  items:
                    type: "string"
                comments:
                  type: "array"
                  items:
                    properties:
                      user_name: 
                        type: "string"
                        example: "t-kusakabe"
                      comment:
                        type: "string"
                        example:   "乾杯ってどう書くか知ってますか？"
        400:
          description: ""
    post:
      tags:
      - "posts"
      summary: "投稿を保存"
      description: "投稿を保存"
      parameters:
        - in: 'body'
          name: 'body'
          required: true
          schema:
            $ref: '#/definitions/Post'
      responses:
        200:
          description: 'Success'
        400:
          description: "Fail to save a article"
    put:
      tags: 
        - 'posts'
      summary: '投稿記事の編集'
      description: '投稿記事の編集'
      parameters:
      - name: 'id'
        in: 'body'
        required: true
        schema:
          $ref: '#/definitions/Post'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Fail to update a post'          
    delete:
      tags: 
      - 'posts'
      summary: '指定のユーザーIDのユーザー情報を削除'
      description: '指定のユーザーIDのユーザー情報を削除'
      parameters:
      - name: 'id'
        in: 'path'
        required: true
        type: integer
      responses:
        200:
          description: OK
        400:
          description: 'Fail to delete a post'          
  /posts/{id}:
    get:
      tags: 
      - 'posts'
      summary: 'ユーザーIDのユーザー情報を取得'
      description: '指定されたユーザーIDのユーザー情報を取得'
      parameters:
      - name: 'id'
        in: 'path'
        required: true
        type: integer
      responses:
        200:
          description: 'Success'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Post'
        400:
          description: 'Fail to get a post'
  /users:
    post:
      tags:
      - "users"
      summary: "ユーザー情報を登録"
      description: "ユーザー情報を登録"
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/login:
    post:
      tags:
      - "users"
      summary: "ユーザーログイン"
      description: "ユーザーログイン"
      operationId: "login"
      parameters:
      - name: "email"
        in: "query"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid username/password supplied"
  /users/logout:
    post:
      tags:
      - "users"
      summary: "ユーザーログアウト"
      description: "ユーザーログアウト"
      operationId: "logout"
      parameters:
      - name: id
        in: query
        description: 'ユーザーID'
        required: true
        type: integer
      responses:
        default:
          description: "successful operation"
  /users/{id}:
    get:
      tags:
      - "users"
      summary: "指定のユーザーIDを取得"
      description: "指定のユーザーIDを取得"
      operationId: "getUserById"
      parameters:
      - name: 'id'
        in: 'path'
        description: 'ユーザー表示名'
        required: true
        type: 'integer'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "ユーザー情報の更新"
      description: 'ユーザー情報の更新'
      operationId: "updateUser"
      parameters:
      - name: 'id'
        in: 'path'
        description: 'ユーザーID'
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "ユーザー情報"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "ユーザー削除"
      description: "ユーザー情報を削除"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
  /users/{id}/followed:
    get:
      tags: 
      - 'users'
      summary: 'フォロワー一覧取得'
      description: 'フォロワー一覧取得' 
      parameters:
      - name: id
        in: 'path'
        description: 'ユーザーID'
        required: true
        type: 'integer'
      responses:
        200:
          description: 'Success'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Follow'
        400:
          description:  'Fail to get followed users'
  /users/{id}/following:
    get:
      tags: 
      - 'users'
      summary: 'フォロ一ユーザー覧取得'
      description: 'フォロ一ユーザー覧取得'
      parameters:
      - name: id
        in: 'path'
        description: 'ユーザーID'
        required: true
        type: 'integer'
      responses:
        200:
          description: 'Success'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Follow'
        400:
          description:  'Fail to get followed users'      
  /users/{id}/following/{following_id}:
    post:
      tags: 
      - 'users'
      summary: 'フォロ一ユーザー覧取得'
      description: 'フォロ一ユーザー覧取得'
      parameters:
      - name: id
        in: 'path'
        description: 'ユーザーID'
        required: true
        type: 'integer'
      - name: following_id
        in: 'path'
        description: '指定のフォローユーザーID'
        required: true
        type: 'integer'
      responses:
        200:
          description: 'Success'
        400:
          description:  'Fail to get followed users'              
definitions:
  Post:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int"
      text:
        type: "string"
      images:
        $ref: '#/definitions/Image'
      user:
        $ref: '#/definitions/User'
      comments:
        $ref: '#/definitions/Comment'
      likes:
        $ref: '#/definitions/Like'
  Image:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
        description: '画像ファイル名'
      created_at:
        format: 'time_stamp'
  Comment:
    type: 'object'
    properties:
      id:
        type: 'integer'
      content:
        type: 'string'
      user_id:
        type: 'integer'
  Like:
      type: 'object'
      properties:
        id:
          type: 'integer'
        user_id:
          type: 'integer'
        post_id:
          type: 'integer'
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      accountName:
        type: 'string'
      displayName:
        type: 'string'
      icon:
        type: 'string'
      email:
        type: "string"
      password:
        type: "string"
      phoneNumber:
        type: "integer"
  Follow:
      type: 'object'
      properties:
        id:
          type: 'integer'
        Following:
          $ref: '#/definitions/User'
        Followed:
          $ref: '#/definitions/User'

